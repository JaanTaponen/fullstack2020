{"version":3,"sources":["service/personService.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","status","Filter","handleFilterChange","onChange","PersonForm","newPerson","handleNameChange","handleNumberChange","onSubmit","type","value","Notification","message","className","content","Persons","newFilter","persons","deletePerson","names","length","filter","person","name","toLowerCase","includes","map","p","key","number","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","Message","setMessage","useEffect","personService","initialPersons","event","target","preventDefault","personObject","window","confirm","find","returnedPerson","setTimeout","concat","catch","error","personToDelete","returnedStatus","updatedPersons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89e2abf4.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n\nconst deleteJSON = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.status)\n}\n\n\n\nexport default { getAll, create, update, deleteJSON }","import React, { useState, useEffect } from 'react'\nimport personService from './service/personService'\n\nconst Filter = ({ handleFilterChange }) => {\n  return (\n    <form >\n      <div>filter shown with<input onChange={handleFilterChange}></input>\n      </div>\n    </form>\n  )\n}\n\nconst PersonForm = ({ newPerson, handleNameChange, handleNumberChange }) => {\n  return (\n    <form onSubmit={newPerson}>\n      <div>name: <input onChange={handleNameChange} /></div>\n      <div>number: <input onChange={handleNumberChange} /></div>\n      <div><button type=\"submit\" value={newPerson.id}>add</button></div>\n    </form>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return message.status ? (\n    <div className=\"success\">{message.content}</div>) :\n    (<div className=\"error\">{message.content}</div>\n    )\n}\n\n\nconst Persons = ({ newFilter, persons, deletePerson }) => {\n  const numbersToShow = newFilter.length === 0\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  const names = numbersToShow.map(p =>\n    <div key={p.name}>{p.name} {p.number}\n      <button value={p.id} onClick={deletePerson}>delete</button>\n    </div>\n  )\n  return (\n    <>\n      {names}\n    </>)\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [Message, setMessage] = useState(null)\n\n  const handleNameChange = (event) => { setNewName(event.target.value) }\n  const handleNumberChange = (event) => { setNewNumber(event.target.value) }\n  const handleFilterChange = (event) => { setNewFilter(event.target.value) }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.map(p => p.name).includes(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the number?`)) {\n        const singlePerson = persons.find(p => p.name === newName)\n        const id = singlePerson.id\n        personService\n          .update(id, personObject)\n          .then(returnedPerson => {\n            setMessage({ content: `'${returnedPerson.name}' number updated`, status: true })\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setPersons(persons.map(p => p.id !== id ? p : returnedPerson))\n          })\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setMessage({ content: `Added '${returnedPerson.name}'`, status: true })\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setMessage({ content: error.response.data.error, status: false })\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const deletePerson = (event) => {\n    const personToDelete = persons.find(p => p.id === event.target.value)\n    const id = personToDelete.id\n\n    if (window.confirm(`Really want to delete? ${personToDelete.name}`)) {\n      personService\n        .deleteJSON(id)\n        .then(returnedStatus => {\n          if (returnedStatus === 204) {\n            const updatedPersons = [...persons].filter(p => p.id !== id)\n            setPersons(updatedPersons)\n          }\n        })\n        .catch(error => {\n          setMessage({ content: `'${personToDelete.name}' was already deleted from the server`, status: false })\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n        \n    }\n  }\n\n  //First load\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={Message} />\n\n      <Filter handleFilterChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm handleNumberChange={handleNumberChange} handleNameChange={handleNameChange} newPerson={addPerson} />\n      <h2>Numbers</h2>\n      <Persons newFilter={newFilter} persons={persons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}